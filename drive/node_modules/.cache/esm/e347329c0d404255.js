let express,dotenv,multer,axios;_0d4‍.w("express",[["default",["express"],function(v){express=v}]]);_0d4‍.w("dotenv",[["default",["dotenv"],function(v){dotenv=v}]]);_0d4‍.w("multer",[["default",["multer"],function(v){multer=v}]]);_0d4‍.w("axios",[["default",["axios"],function(v){axios=v}]]);const fs = require('fs');
const readline = require('readline');
const {google} = require('googleapis');


dotenv.config();
const app = express();

app.use(express.json());
app.use (express.urlencoded({extended:false}));
const port = 3000 || process.env.PORT, ip = process.env.IP;


// If modifying these scopes, delete token.json.
const SCOPES = ['https://www.googleapis.com/auth/drive'];
const scope = 'https://www.googleapis.com/auth/drive';
// The file token.json stores the user's access and refresh tokens, and is
// created automatically when the authorization flow completes for the first
// time.
const TOKEN_PATH = 'token.json';

// Load client secrets from a local file.
fs.readFile('credentials.json', (err, content) => {
  if (err) return _0d4‍.g.console.log('Error loading client secret file:', err);
  // Authorize a client with credentials, then call the Google Drive API.
  authorize(JSON.parse(content), listFiles);
});

/**
 * Create an OAuth2 client with the given credentials, and then execute the
 * given callback function.
 * @param {Object} credentials The authorization client credentials.
 * @param {function} callback The callback to call with the authorized client.
 */
function authorize(credentials, callback) {
  const {client_secret, client_id, redirect_uris} = credentials.installed;
  const oAuth2Client = new google.auth.OAuth2(
      client_id, client_secret, redirect_uris[0]);

  // Check if we have previously stored a token.
  fs.readFile(TOKEN_PATH, (err, token) => {
    if (err) return getAccessToken(oAuth2Client, callback);
    oAuth2Client.setCredentials(JSON.parse(token));
    callback(oAuth2Client);
  });
}

/**
 * Get and store new token after prompting for user authorization, and then
 * execute the given callback with the authorized OAuth2 client.
 * @param {google.auth.OAuth2} oAuth2Client The OAuth2 client to get token for.
 * @param {getEventsCallback} callback The callback for the authorized client.
 */
function getAccessToken(oAuth2Client, callback) {
  const authUrl = oAuth2Client.generateAuthUrl({
    access_type: 'offline',
    scope: SCOPES,
  });
  _0d4‍.g.console.log('Authorize this app by visiting this url:', authUrl);
  const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout,
  });
  rl.question('Enter the code from that page here: ', (code) => {
    rl.close();
    oAuth2Client.getToken(code, (err, token) => {
      if (err) return _0d4‍.g.console.error('Error retrieving access token', err);
      oAuth2Client.setCredentials(token);
      // Store the token to disk for later program executions
      fs.writeFile(TOKEN_PATH, JSON.stringify(token), (err) => {
        if (err) return _0d4‍.g.console.error(err);
        _0d4‍.g.console.log('Token stored to', TOKEN_PATH);
      });
      callback(oAuth2Client);
    });
  });
}

/**
 * Lists the names and IDs of up to 10 files.
 * @param {google.auth.OAuth2} auth An authorized OAuth2 client.
 */
function listFiles(auth) {
  const drive = google.drive({version: 'v3', auth});
  drive.files.list({
    pageSize: 10,
    fields: 'nextPageToken, files(id, name)',
  }, (err, res) => {
    if (err) return _0d4‍.g.console.log('The API returned an error: ' + err);
    const files = res.data.files;
    if (files.length) {
      console.log('Files:');
      files.map((file) => {
        console.log(`${file.name} (${file.id})`);
      });
    } else {
      console.log('No files found.');
    }
  });
}

// console.log(process.env);

const OAuth2Client = new google.auth.OAuth2(
  process.env.client_id,
  process.env.client_secret,
  process.env.redirect_uris
);

OAuth2Client.setCredentials({
  access_token : process.env.access_token,
  refresh_token : process.env.refresh_token,
  expiry_date : process.env.expiry_date,
  scopes:scope
})

var drive = google.drive({
  version: 'v3',
  auth 
});

let storage = multer.diskStorage({
    destination: function (req, file, cb) {
      cb(null, '/uploads')
    },
    filename: function (req, file, cb) {
      cb(null, file.fieldname + '-' + Date.now())
    }
  })
   
let upload = multer({storage}).single('file');
app.set('view engine', 'ejs')
app.use(express.static(__dirname +'/public'))

app.get('/', (req, res)=> {
    res.status(200).json({message: 'Welcome to test app'});
})

app.get('/files/new', (req, res)=> {
    res.status(200).render('new');
})

app.post('/files',  (req, res)=> {
    drive.files.create({
    requestBody: {
      name: 'Test',
      mimeType: 'text/plain'
    },
    media: {
      mimeType: 'text/plain',
      body: 'Hello World I am the first successful upload by boye'
    }
  })
  .then(response=> {
    _0d4‍.g.console.log(response)
  })
  .catch(err=>_0d4‍.g.console.log(err.message))
    // const file = fs.readFile('ml-run-data-individual.csv', (err, data)=> {
    //     err? console.log(err) : console.log(data)
    // })
    // console.log(req.body, file);
    // console.log(req.body.file);
    // axios ({
    //     method : 'POST',
    //     url: 'https://www.googleapis.com/upload/drive/v3/files?uploadType=media',
    //     data: file,
    // })
    // .then(res=> console.log(res))
    // .catch(err=>console.log(err.message))
    res.status(200).json({message: 'We got the file'})
})

app.listen(port, () => {
    console.log(`drive trial app running on port ${port}, and ip ${ip}`)
})